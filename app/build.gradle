apply plugin: 'com.android.application'
apply plugin: 'channel'

android {
    compileSdkVersion versions.compileSdk

    compileOptions {
        sourceCompatibility versions.java
        targetCompatibility versions.java
    }

    defaultConfig {
        applicationId "com.wptdxii.java.playground"
        minSdkVersion versions.minSdk
        targetSdkVersion versions.targetSdk
        versionCode versions.code
        versionName versions.name
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"

        buildConfigField "String", "BASE_URL_GANK", "\"${BASE_URL_GANK}\""
        buildConfigField "String", "BASE_URL_DOUBAN", "\"${BASE_URL_DOUBAN}\""
    }

    signingConfigs {
        config {
            storeFile file(signings.storeFile)
            storePassword signings.storePassword
            keyAlias signings.keyAlias
            keyPassword signings.keyPassword
            v1SigningEnabled true
            v2SigningEnabled true
        }
    }

    buildTypes {
        debug {
            applicationIdSuffix '.debug'
            signingConfig signingConfigs.config
            useProguard false
        }

        release {
            signingConfig signingConfigs.config
            minifyEnabled false
            useProguard true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
//            postprocessing {
//                removeUnusedCode true
//                removeUnusedResources true
//                obfuscate true
//                optimizeCode true
//                proguardFile 'proguard-rules.pro'
//            }
        }
    }

    flavorDimensions "buildType"
    productFlavors {

        mock {
            dimension "buildType"
            applicationIdSuffix = ".mock"
        }

        prod {
            dimension "buildType"
        }

    }

    variantFilter { variant ->
        if ('release' == variant.buildType.name
                && 'mock' == variant.getFlavors().get(0).name) {
            variant.setIgnore(true)
        }
    }

    applicationVariants.all { variant ->
        variant.outputs.all { output ->
            outputFileName = "Playground-v${variant.versionName}.apk"
        }
    }

    // for VasDolly
    channel {
        channelFile = file(channels.file)
        apkNameFormat = 'Playground-v${versionName}-${flavorName}-${buildType}'
        isFastMode = false
    }
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation project(':sdk:framekit')
    implementation project(':sdk:uikit')

    implementation supports.v7
    implementation supports.constraint
    implementation supports.design
    implementation supports.cardView

    androidTestImplementation testings.runner
    androidTestImplementation testings.espresso

    implementation di.butterknife
    annotationProcessor di.butterknifeCompiler

    implementation di.dagger
    annotationProcessor di.daggerCompiler
    implementation di.daggerAndroid
    implementation di.daggerAndroidSupport
    annotationProcessor di.daggerAndroidCompiler

    implementation room.runtime
    annotationProcessor room.compiler
    testImplementation room.test
    implementation room.rxjava

    implementation channels.vasdolly

    implementation rx.java
    implementation rx.android

    implementation net.gson
    implementation net.retrofit
    implementation net.rxjavaAdapter
    implementation net.gsonConverter
    implementation(net.loggingInterceptor) {
        exclude group: 'org.json', module: 'json'
    }

    implementation log.logger
    implementation log.timber
}
